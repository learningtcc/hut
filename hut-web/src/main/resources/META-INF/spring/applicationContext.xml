<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!-- 组件扫描 -->
    <context:component-scan base-package="com.hut.web com.hut.common.service">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!-- 使用spring自带的占位符替换功能 -->
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <!-- 允许JVM参数覆盖 -->
        <property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE"/>
        <!-- 忽略没有找到的资源文件 -->
        <property name="ignoreResourceNotFound" value="true"/>
        <!-- 配置资源文件 -->
        <property name="locations">
            <list>
                <value>classpath:META-INF/system-config.properties</value>
                <value>classpath:META-INF/rabbit.properties</value>
                <value>classpath:META-INF/redis.properties</value>
                <value>classpath:META-INF/host.properties</value>
                <value>classpath:META-INF/http.properties</value>
            </list>
        </property>
    </bean>

    <!--配数据源 -->
    <bean name="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <constructor-arg name="url" value="${db.url}"/>
        <constructor-arg name="username" value="${db.user}"/>
        <constructor-arg name="password" value="${db.password}"/>

        <property name="driverClassName" value="${db.driver}"/>
    </bean>
    <!--<bean name="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
        <property name="driverClass" value="${db.driver}" />
        <property name="jdbcUrl" value="${db.url}" />
        <property name="user" value="${db.user}" />
        <property name="password" value="${db.password}" />
        <property name="acquireIncrement" value="1"/>
        <property name="initialPoolSize" value="80"/>
        <property name="maxIdleTime" value="60"/>
        <property name="maxPoolSize" value="80"/>
        <property name="minPoolSize" value="30"/>
        <property name="acquireRetryDelay" value="1000"/>
        <property name="acquireRetryAttempts" value="60"/>
        <property name="breakAfterAcquireFailure" value="false"/>
    </bean>-->

    <!-- mybatis事务管理器 -->
    <bean name="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- mybatis连接工厂 -->
    <bean name="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:META-INF/mybatis/mybatis-config.xml"/>
        <!-- <property name="mapperLocations">
             <array>
                 <value>classpath:META-INF/mybatis/mapper/*.xml</value>
             </array>
         </property>-->
    </bean>

    <!-- mybatis扫包 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.hut.web.dao"/>
        <!--<property name="properties">
            <value>
                mappers=tk.mybatis.mapper.common.Mapper
                &lt;!&ndash;
                UUID：设置生成UUID的方法，需要用OGNL方式配置，不限制返回值，但是必须和字段类型匹配
                IDENTITY：取回主键的方式，可以配置的内容看下一篇如何使用中的介绍
                ORDER：<selectKey>中的order属性，可选值为BEFORE和AFTER
                catalog：数据库的catalog，如果设置该值，查询的时候表名会带catalog设置的前缀
                schema：同catalog，catalog优先级高于schema
                seqFormat：序列的获取规则,使用{num}格式化参数，默认值为{0}.nextval，针对Oracle，可选参数一共4个，对应0,1,2,3分别为SequenceName，ColumnName, PropertyName，TableName
                notEmpty：insert和update中，是否判断字符串类型!=''，少数方法会用到
                style：实体和表转换时的规则，默认驼峰转下划线，可选值为normal用实体名和字段名;camelhump是默认值，驼峰转下划线;uppercase转换为大写;lowercase转换为小写
                enableMethodAnnotation：可以控制是否支持方法上的JPA注解，默认false。
                &ndash;&gt;
            </value>
        </property>-->
    </bean>

    <!-- 使用基于注解的事务管理 -->
    <tx:annotation-driven  transaction-manager="transactionManager" />

</beans>